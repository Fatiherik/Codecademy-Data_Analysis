— # Import packages
import codecademylib
import numpy as np
import pandas as pd

# Import matplotlib pyplot
from matplotlib import pyplot as plt

# Read in transactions data
mu, sigma = 800, 100 # mean and standard deviation
burrito_calories = np.random.normal(mu, sigma, 320)

# Save transaction times to a separate numpy array
plt.hist(burrito_calories, range=(250, 1250), bins=100,  edgecolor='black')
plt.title("Calories in a Burrito Bowl", fontsize = 24)
plt.xlabel("Calories", fontsize=18)
plt.ylabel("Count", fontsize=18)

plt.show()

—# Import packages
import numpy as np
import pandas as pd

# Read in transactions data
transactions = pd.read_csv("transactions.csv")
transactions = transactions.drop(["Unnamed: 0"], axis = 1)

# Save transaction times to a separate numpy array
times = transactions["Transaction Time"].values
cost = transactions["Cost"].values

# Print transactions below
print(transactions)

# Print the average times below
print(np.average(times))


—# Import packages
import numpy as np
import pandas as pd

# Read in transactions data
transactions = pd.read_csv("transactions.csv")

# Save transaction data to numpy arrays
times = transactions["Transaction Time"].values
cost = transactions["Cost"].values

# Find the minimum time, maximum time, and range
min_time = np.amin(times)
max_time = np.amax(times)
range_time = max_time-min_time

# Printing the values
print("Earliest Time: " + str(min_time))
print("Latest Time: " + str(max_time))
print("Time Range: " + str(range_time))

—# Import packages
import numpy as np
import pandas as pd

# Array of days old bread
days_old_bread = np.array([0, 8, 7, 8, 0, 2, 3, 5, 6, 2])

# Set the minimum and maximums of the array below
max_days_old=np.amax(days_old_bread)
min_days_old=np.amin(days_old_bread)


# Set the number of bins to 3
bins=3

# Calculate the bin range
try:
  bin_range = (max_days_old - min_days_old + 1) / bins
  print("Bins: " + str(bins))
  print("Bin Width: " + str(bin_range))
# Printing the values
except:
  print("You have not set the min, max, or bins values yet.")

—# Import packages
import numpy as np
import pandas as pd

# Array of days old bread
days_old_bread = np.array([0, 8, 7, 8, 0, 2, 3, 5, 6, 2])

# Count the values in each bin 
days_old_012 = 4
days_old_345 = 2
days_old_678 = 4

# Printing the values
print("Between 0 and 2 days: " + str(days_old_012))
print("Between 3 and 5 days: " + str(days_old_345))
print("Between 6 and 8 days: " + str(days_old_678))

—# Import packages
import numpy as np
import pandas as pd

# Read in transactions data
transactions = pd.read_csv("transactions.csv")

# Save transaction times to a separate numpy array
times = transactions["Transaction Time"].values

# Use numpy.histogram() below
times_hist = np.histogram(times, range=(0,24),bins=4)

print(times_hist)

— # Import packages
import codecademylib
import numpy as np
import pandas as pd

# import pyplot as plt
from matplotlib import pyplot as plt

# Read in transactions data
transactions = pd.read_csv("transactions.csv")

# Save transaction times to a separate numpy array
times = transactions["Transaction Time"].values

# Use plt.hist() below
plt.hist(times, range = (0, 24), bins = 4, edgecolor='black')

plt.title("Bussiest time")
plt.xlabel("Hours")
plt.ylabel("# of Customer")

plt.show()

—# Import packages
import codecademylib
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

# Read in transactions data
transactions = pd.read_csv("transactions.csv")

# Save transaction times to a separate numpy array
times = transactions["Transaction Time"].values

# Use plt.hist() below
plt.hist(times, range=(0, 24), bins=24,  edgecolor="black")
plt.title("Weekday Frequency of Customers")
plt.xlabel("Hours (1 hour increments)")
plt.ylabel("Count")

plt.show()

—# Import packages
import codecademylib
import numpy as np
import pandas as pd

# Import matplotlib pyplot
from matplotlib import pyplot as plt

# Read in transactions data
transactions = pd.read_csv("transactions.csv")

# Save transaction times to a separate numpy array
times = transactions["Transaction Time"].values
cost = transactions["Cost"].values
max_cost=np.amax(cost)
min_cost=np.amin(cost)
print(max_cost,min_cost)

# Use plt.hist() below
plt.hist(cost, range=(0, 165), bins=11,  edgecolor="black")
plt.title("Cost-Count")
plt.xlabel("Cost")
plt.ylabel("Count")

plt.show()

—
